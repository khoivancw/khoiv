import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from PIL import Image, ImageTk
import time
import cv2
import pytesseract

# Cấu hình Tesseract OCR (nếu cần)
# pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'

# Dữ liệu bãi đậu xe
total_motorbike_spots = 5
total_car_spots = 5
motorbike_spots = []
car_spots = []
parking_history = []

# Hàm mở cửa sổ chọn ảnh
def select_image():
    file_path = filedialog.askopenfilename(title="Chọn ảnh biển số", filetypes=[("Image Files", "*.jpg;*.jpeg;*.png;*.bmp")])
    return file_path

# Nhận diện biển số xe
def recognize_plate(image_path):
    """
    Nhận diện biển số từ ảnh thực tế.
    """
    try:
        img = cv2.imread(image_path)
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        thresh = cv2.threshold(gray, 150, 255, cv2.THRESH_BINARY)[1]
        text = pytesseract.image_to_string(thresh, lang='eng')
        text = text.strip().upper().replace(" ", "")
        if len(text) >= 6:
            return text
        return "UNKNOWN"
    except Exception as e:
        print(f"OCR Error: {str(e)}")
        return "ERROR"

# Kiểm tra loại xe
def check_vehicle_type(license_plate):
    if len(license_plate) < 8:
        return 'motorbike'
    else:
        return 'car'

# Tính phí đậu xe
def calculate_parking_fee(vehicle_type, time_in):
    current_time = time.time()
    time_parked = current_time - time_in
    hours_parked = time_parked / 3600
    if vehicle_type == 'motorbike':
        fee = 1000 * hours_parked
    else:
        fee = 2000 * hours_parked
    return round(fee, 2)

# Lưu xe vào bãi đậu
def park_vehicle(tree, license_plate, vehicle_type):
    time_in = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
    if vehicle_type == 'motorbike':
        if len(motorbike_spots) < total_motorbike_spots:
            motorbike_spots.append((license_plate, time.time()))
            tree.insert("", "end", values=(license_plate, time_in, "None", "None", "Xe máy", "Khu A"))
            messagebox.showinfo("Thông báo", f"Xe máy {license_plate} đã được đậu vào khu A.")
        else:
            messagebox.showwarning("Bãi đậu đầy", "Khu A (xe máy) đã đầy.")
    else:
        if len(car_spots) < total_car_spots:
            car_spots.append((license_plate, time.time()))
            tree.insert("", "end", values=(license_plate, time_in, "None", "None", "Ô tô", "Khu B"))
            messagebox.showinfo("Thông báo", f"Ô tô {license_plate} đã được đậu vào khu B.")
        else:
            messagebox.showwarning("Bãi đậu đầy", "Khu B (ô tô) đã đầy.")

# Xử lý xe vào bãi
def process_parking(tree, image_canvas):
    image_path = select_image()
    if image_path:
        # Hiển thị ảnh trong khung nhỏ
        img = Image.open(image_path)
        img = img.resize((200, 150), Image.Resampling.LANCZOS)  # Sửa lỗi ANTIALIAS
        img_tk = ImageTk.PhotoImage(img)
        image_canvas.image = img_tk
        image_canvas.create_image(0, 0, anchor=tk.NW, image=img_tk)

        # Nhận diện biển số
        license_plate_text = recognize_plate(image_path)
        if license_plate_text and license_plate_text != "UNKNOWN":
            vehicle_type = check_vehicle_type(license_plate_text)
            park_vehicle(tree, license_plate_text, vehicle_type)
        else:
            messagebox.showwarning("Không nhận diện được", "Không thể nhận diện biển số từ ảnh này.")
    else:
        messagebox.showwarning("Chưa chọn ảnh", "Bạn chưa chọn ảnh biển số.")

# Xử lý xe ra bãi
def process_exit(tree):
    selected_item = tree.selection()
    if not selected_item:
        messagebox.showwarning("Chưa chọn xe", "Vui lòng chọn xe muốn ra.")
        return

    item = tree.item(selected_item)
    license_plate = item["values"][0]
    time_in_str = item["values"][1]
    vehicle_type = item["values"][4]

    # Tính phí và cập nhật thời gian ra
    time_in = time.mktime(time.strptime(time_in_str, "%Y-%m-%d %H:%M:%S"))
    fee = calculate_parking_fee(vehicle_type, time_in)
    time_out = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())

    # Cập nhật bảng và xóa khỏi danh sách
    tree.item(selected_item, values=(license_plate, time_in_str, time_out, f"{fee} VND", vehicle_type, item["values"][5]))
    if vehicle_type == "Xe máy":
        motorbike_spots[:] = [spot for spot in motorbike_spots if spot[0] != license_plate]
    else:
        car_spots[:] = [spot for spot in car_spots if spot[0] != license_plate]

    messagebox.showinfo("Thanh toán", f"Phí đậu xe cho {license_plate} là {fee} VND.")

# Xóa tất cả dữ liệu
def clear_all(tree):
    for item in tree.get_children():
        tree.delete(item)
    motorbike_spots.clear()
    car_spots.clear()
    messagebox.showinfo("Thông báo", "Đã xóa tất cả dữ liệu trong bãi đậu.")

# Giao diện người dùng
def create_gui():
    root = tk.Tk()
    root.title("Hệ thống Bãi Đậu Xe Thông Minh")
    root.geometry("1000x600")
    root.configure(bg="#6495ED")

    # Frame chính
    main_frame = tk.Frame(root, bg="#FF4040")
    main_frame.pack(fill=tk.BOTH, expand=True)

    # Phần trên: Bảng dữ liệu
    table_frame = tk.Frame(main_frame, bg="#33CCFF")
    table_frame.pack(side=tk.TOP, fill=tk.BOTH, expand=True, padx=10, pady=10)

    columns = ["Biển số", "Giờ vào", "Giờ ra", "Phí", "Loại xe", "Khu"]
    tree = ttk.Treeview(table_frame, columns=columns, show="headings", height=10)
    for col in columns:
        tree.heading(col, text=col)
        tree.column(col, width=100, anchor=tk.CENTER)
    tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

    # Thanh cuộn cho bảng
    scrollbar = ttk.Scrollbar(table_frame, orient=tk.VERTICAL, command=tree.yview)
    tree.configure(yscrollcommand=scrollbar.set)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    # Phần bên phải: Hiển thị ảnh biển số
    image_frame = tk.Frame(main_frame, bg="#FF4040", width=200)
    image_frame.pack(side=tk.RIGHT, fill=tk.Y, padx=10, pady=10)

    image_label = tk.Label(image_frame, text="Ảnh biển số xe", bg="#00F5FF", font=("Arial", 12, "bold"))
    image_label.pack(pady=10)

    image_canvas = tk.Canvas(image_frame, width=200, height=150, bg="#FFFAF0", relief=tk.SUNKEN)
    image_canvas.pack()

    # Phần dưới: Các nút chức năng và trạng thái
    bottom_frame = tk.Frame(main_frame, bg="")
    bottom_frame.pack(side=tk.BOTTOM, fill=tk.X, padx=10, pady=10)

    # Các nút chức năng
    button_frame = tk.Frame(bottom_frame, bg="")
    button_frame.pack(side=tk.LEFT, padx=10)

    tk.Button(button_frame, text="Xe vào (Ảnh)", bg="#00DD00", fg="white", font=("Arial", 12), width=15, command=lambda: process_parking(tree, image_canvas)).pack(side=tk.LEFT, padx=5)
    tk.Button(button_frame, text="Xe ra", bg="#00FFFF", fg="white", font=("Arial", 12), width=15, command=lambda: process_exit(tree)).pack(side=tk.LEFT, padx=5)
    tk.Button(button_frame, text="Xóa tất cả", bg="#7f8c8d", fg="white", font=("Arial", 12), width=15, command=lambda: clear_all(tree)).pack(side=tk.LEFT, padx=5)

    root.mainloop()

# Chạy giao diện người dùng
create_gui()